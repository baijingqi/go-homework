// Code generated by entc, DO NOT EDIT.

package ent

import (
	"comment/ent/comment"
	"comment/ent/commentcount"
	"comment/ent/predicate"
	"context"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeComment      = "Comment"
	TypeCommentCount = "CommentCount"
)

// CommentMutation represents an operation that mutates the Comment nodes in the graph.
type CommentMutation struct {
	config
	op                   Op
	typ                  string
	id                   *uint64
	uid                  *uint64
	adduid               *uint64
	relation_id          *uint64
	addrelation_id       *uint64
	reply_to_uid         *uint64
	addreply_to_uid      *uint64
	relation_type        *uint32
	addrelation_type     *uint32
	parent_id            *uint64
	addparent_id         *uint64
	belong_comment_id    *uint64
	addbelong_comment_id *uint64
	content              *string
	created_at           *time.Time
	updated_at           *time.Time
	clearedFields        map[string]struct{}
	done                 bool
	oldValue             func(context.Context) (*Comment, error)
	predicates           []predicate.Comment
}

var _ ent.Mutation = (*CommentMutation)(nil)

// commentOption allows management of the mutation configuration using functional options.
type commentOption func(*CommentMutation)

// newCommentMutation creates new mutation for the Comment entity.
func newCommentMutation(c config, op Op, opts ...commentOption) *CommentMutation {
	m := &CommentMutation{
		config:        c,
		op:            op,
		typ:           TypeComment,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCommentID sets the ID field of the mutation.
func withCommentID(id uint64) commentOption {
	return func(m *CommentMutation) {
		var (
			err   error
			once  sync.Once
			value *Comment
		)
		m.oldValue = func(ctx context.Context) (*Comment, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Comment.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withComment sets the old Comment of the mutation.
func withComment(node *Comment) commentOption {
	return func(m *CommentMutation) {
		m.oldValue = func(context.Context) (*Comment, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CommentMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CommentMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Comment entities.
func (m *CommentMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CommentMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetUID sets the "uid" field.
func (m *CommentMutation) SetUID(u uint64) {
	m.uid = &u
	m.adduid = nil
}

// UID returns the value of the "uid" field in the mutation.
func (m *CommentMutation) UID() (r uint64, exists bool) {
	v := m.uid
	if v == nil {
		return
	}
	return *v, true
}

// OldUID returns the old "uid" field's value of the Comment entity.
// If the Comment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CommentMutation) OldUID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUID: %w", err)
	}
	return oldValue.UID, nil
}

// AddUID adds u to the "uid" field.
func (m *CommentMutation) AddUID(u uint64) {
	if m.adduid != nil {
		*m.adduid += u
	} else {
		m.adduid = &u
	}
}

// AddedUID returns the value that was added to the "uid" field in this mutation.
func (m *CommentMutation) AddedUID() (r uint64, exists bool) {
	v := m.adduid
	if v == nil {
		return
	}
	return *v, true
}

// ResetUID resets all changes to the "uid" field.
func (m *CommentMutation) ResetUID() {
	m.uid = nil
	m.adduid = nil
}

// SetRelationID sets the "relation_id" field.
func (m *CommentMutation) SetRelationID(u uint64) {
	m.relation_id = &u
	m.addrelation_id = nil
}

// RelationID returns the value of the "relation_id" field in the mutation.
func (m *CommentMutation) RelationID() (r uint64, exists bool) {
	v := m.relation_id
	if v == nil {
		return
	}
	return *v, true
}

// OldRelationID returns the old "relation_id" field's value of the Comment entity.
// If the Comment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CommentMutation) OldRelationID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRelationID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRelationID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRelationID: %w", err)
	}
	return oldValue.RelationID, nil
}

// AddRelationID adds u to the "relation_id" field.
func (m *CommentMutation) AddRelationID(u uint64) {
	if m.addrelation_id != nil {
		*m.addrelation_id += u
	} else {
		m.addrelation_id = &u
	}
}

// AddedRelationID returns the value that was added to the "relation_id" field in this mutation.
func (m *CommentMutation) AddedRelationID() (r uint64, exists bool) {
	v := m.addrelation_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetRelationID resets all changes to the "relation_id" field.
func (m *CommentMutation) ResetRelationID() {
	m.relation_id = nil
	m.addrelation_id = nil
}

// SetReplyToUID sets the "reply_to_uid" field.
func (m *CommentMutation) SetReplyToUID(u uint64) {
	m.reply_to_uid = &u
	m.addreply_to_uid = nil
}

// ReplyToUID returns the value of the "reply_to_uid" field in the mutation.
func (m *CommentMutation) ReplyToUID() (r uint64, exists bool) {
	v := m.reply_to_uid
	if v == nil {
		return
	}
	return *v, true
}

// OldReplyToUID returns the old "reply_to_uid" field's value of the Comment entity.
// If the Comment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CommentMutation) OldReplyToUID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldReplyToUID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldReplyToUID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReplyToUID: %w", err)
	}
	return oldValue.ReplyToUID, nil
}

// AddReplyToUID adds u to the "reply_to_uid" field.
func (m *CommentMutation) AddReplyToUID(u uint64) {
	if m.addreply_to_uid != nil {
		*m.addreply_to_uid += u
	} else {
		m.addreply_to_uid = &u
	}
}

// AddedReplyToUID returns the value that was added to the "reply_to_uid" field in this mutation.
func (m *CommentMutation) AddedReplyToUID() (r uint64, exists bool) {
	v := m.addreply_to_uid
	if v == nil {
		return
	}
	return *v, true
}

// ResetReplyToUID resets all changes to the "reply_to_uid" field.
func (m *CommentMutation) ResetReplyToUID() {
	m.reply_to_uid = nil
	m.addreply_to_uid = nil
}

// SetRelationType sets the "relation_type" field.
func (m *CommentMutation) SetRelationType(u uint32) {
	m.relation_type = &u
	m.addrelation_type = nil
}

// RelationType returns the value of the "relation_type" field in the mutation.
func (m *CommentMutation) RelationType() (r uint32, exists bool) {
	v := m.relation_type
	if v == nil {
		return
	}
	return *v, true
}

// OldRelationType returns the old "relation_type" field's value of the Comment entity.
// If the Comment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CommentMutation) OldRelationType(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRelationType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRelationType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRelationType: %w", err)
	}
	return oldValue.RelationType, nil
}

// AddRelationType adds u to the "relation_type" field.
func (m *CommentMutation) AddRelationType(u uint32) {
	if m.addrelation_type != nil {
		*m.addrelation_type += u
	} else {
		m.addrelation_type = &u
	}
}

// AddedRelationType returns the value that was added to the "relation_type" field in this mutation.
func (m *CommentMutation) AddedRelationType() (r uint32, exists bool) {
	v := m.addrelation_type
	if v == nil {
		return
	}
	return *v, true
}

// ResetRelationType resets all changes to the "relation_type" field.
func (m *CommentMutation) ResetRelationType() {
	m.relation_type = nil
	m.addrelation_type = nil
}

// SetParentID sets the "parent_id" field.
func (m *CommentMutation) SetParentID(u uint64) {
	m.parent_id = &u
	m.addparent_id = nil
}

// ParentID returns the value of the "parent_id" field in the mutation.
func (m *CommentMutation) ParentID() (r uint64, exists bool) {
	v := m.parent_id
	if v == nil {
		return
	}
	return *v, true
}

// OldParentID returns the old "parent_id" field's value of the Comment entity.
// If the Comment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CommentMutation) OldParentID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldParentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldParentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldParentID: %w", err)
	}
	return oldValue.ParentID, nil
}

// AddParentID adds u to the "parent_id" field.
func (m *CommentMutation) AddParentID(u uint64) {
	if m.addparent_id != nil {
		*m.addparent_id += u
	} else {
		m.addparent_id = &u
	}
}

// AddedParentID returns the value that was added to the "parent_id" field in this mutation.
func (m *CommentMutation) AddedParentID() (r uint64, exists bool) {
	v := m.addparent_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetParentID resets all changes to the "parent_id" field.
func (m *CommentMutation) ResetParentID() {
	m.parent_id = nil
	m.addparent_id = nil
}

// SetBelongCommentID sets the "belong_comment_id" field.
func (m *CommentMutation) SetBelongCommentID(u uint64) {
	m.belong_comment_id = &u
	m.addbelong_comment_id = nil
}

// BelongCommentID returns the value of the "belong_comment_id" field in the mutation.
func (m *CommentMutation) BelongCommentID() (r uint64, exists bool) {
	v := m.belong_comment_id
	if v == nil {
		return
	}
	return *v, true
}

// OldBelongCommentID returns the old "belong_comment_id" field's value of the Comment entity.
// If the Comment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CommentMutation) OldBelongCommentID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldBelongCommentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldBelongCommentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBelongCommentID: %w", err)
	}
	return oldValue.BelongCommentID, nil
}

// AddBelongCommentID adds u to the "belong_comment_id" field.
func (m *CommentMutation) AddBelongCommentID(u uint64) {
	if m.addbelong_comment_id != nil {
		*m.addbelong_comment_id += u
	} else {
		m.addbelong_comment_id = &u
	}
}

// AddedBelongCommentID returns the value that was added to the "belong_comment_id" field in this mutation.
func (m *CommentMutation) AddedBelongCommentID() (r uint64, exists bool) {
	v := m.addbelong_comment_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetBelongCommentID resets all changes to the "belong_comment_id" field.
func (m *CommentMutation) ResetBelongCommentID() {
	m.belong_comment_id = nil
	m.addbelong_comment_id = nil
}

// SetContent sets the "content" field.
func (m *CommentMutation) SetContent(s string) {
	m.content = &s
}

// Content returns the value of the "content" field in the mutation.
func (m *CommentMutation) Content() (r string, exists bool) {
	v := m.content
	if v == nil {
		return
	}
	return *v, true
}

// OldContent returns the old "content" field's value of the Comment entity.
// If the Comment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CommentMutation) OldContent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldContent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldContent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContent: %w", err)
	}
	return oldValue.Content, nil
}

// ResetContent resets all changes to the "content" field.
func (m *CommentMutation) ResetContent() {
	m.content = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *CommentMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *CommentMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Comment entity.
// If the Comment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CommentMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *CommentMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *CommentMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *CommentMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Comment entity.
// If the Comment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CommentMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *CommentMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// Where appends a list predicates to the CommentMutation builder.
func (m *CommentMutation) Where(ps ...predicate.Comment) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *CommentMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Comment).
func (m *CommentMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CommentMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.uid != nil {
		fields = append(fields, comment.FieldUID)
	}
	if m.relation_id != nil {
		fields = append(fields, comment.FieldRelationID)
	}
	if m.reply_to_uid != nil {
		fields = append(fields, comment.FieldReplyToUID)
	}
	if m.relation_type != nil {
		fields = append(fields, comment.FieldRelationType)
	}
	if m.parent_id != nil {
		fields = append(fields, comment.FieldParentID)
	}
	if m.belong_comment_id != nil {
		fields = append(fields, comment.FieldBelongCommentID)
	}
	if m.content != nil {
		fields = append(fields, comment.FieldContent)
	}
	if m.created_at != nil {
		fields = append(fields, comment.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, comment.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CommentMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case comment.FieldUID:
		return m.UID()
	case comment.FieldRelationID:
		return m.RelationID()
	case comment.FieldReplyToUID:
		return m.ReplyToUID()
	case comment.FieldRelationType:
		return m.RelationType()
	case comment.FieldParentID:
		return m.ParentID()
	case comment.FieldBelongCommentID:
		return m.BelongCommentID()
	case comment.FieldContent:
		return m.Content()
	case comment.FieldCreatedAt:
		return m.CreatedAt()
	case comment.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CommentMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case comment.FieldUID:
		return m.OldUID(ctx)
	case comment.FieldRelationID:
		return m.OldRelationID(ctx)
	case comment.FieldReplyToUID:
		return m.OldReplyToUID(ctx)
	case comment.FieldRelationType:
		return m.OldRelationType(ctx)
	case comment.FieldParentID:
		return m.OldParentID(ctx)
	case comment.FieldBelongCommentID:
		return m.OldBelongCommentID(ctx)
	case comment.FieldContent:
		return m.OldContent(ctx)
	case comment.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case comment.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Comment field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CommentMutation) SetField(name string, value ent.Value) error {
	switch name {
	case comment.FieldUID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUID(v)
		return nil
	case comment.FieldRelationID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRelationID(v)
		return nil
	case comment.FieldReplyToUID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReplyToUID(v)
		return nil
	case comment.FieldRelationType:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRelationType(v)
		return nil
	case comment.FieldParentID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetParentID(v)
		return nil
	case comment.FieldBelongCommentID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBelongCommentID(v)
		return nil
	case comment.FieldContent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContent(v)
		return nil
	case comment.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case comment.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Comment field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CommentMutation) AddedFields() []string {
	var fields []string
	if m.adduid != nil {
		fields = append(fields, comment.FieldUID)
	}
	if m.addrelation_id != nil {
		fields = append(fields, comment.FieldRelationID)
	}
	if m.addreply_to_uid != nil {
		fields = append(fields, comment.FieldReplyToUID)
	}
	if m.addrelation_type != nil {
		fields = append(fields, comment.FieldRelationType)
	}
	if m.addparent_id != nil {
		fields = append(fields, comment.FieldParentID)
	}
	if m.addbelong_comment_id != nil {
		fields = append(fields, comment.FieldBelongCommentID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CommentMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case comment.FieldUID:
		return m.AddedUID()
	case comment.FieldRelationID:
		return m.AddedRelationID()
	case comment.FieldReplyToUID:
		return m.AddedReplyToUID()
	case comment.FieldRelationType:
		return m.AddedRelationType()
	case comment.FieldParentID:
		return m.AddedParentID()
	case comment.FieldBelongCommentID:
		return m.AddedBelongCommentID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CommentMutation) AddField(name string, value ent.Value) error {
	switch name {
	case comment.FieldUID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUID(v)
		return nil
	case comment.FieldRelationID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRelationID(v)
		return nil
	case comment.FieldReplyToUID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddReplyToUID(v)
		return nil
	case comment.FieldRelationType:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRelationType(v)
		return nil
	case comment.FieldParentID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddParentID(v)
		return nil
	case comment.FieldBelongCommentID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddBelongCommentID(v)
		return nil
	}
	return fmt.Errorf("unknown Comment numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CommentMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CommentMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CommentMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Comment nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CommentMutation) ResetField(name string) error {
	switch name {
	case comment.FieldUID:
		m.ResetUID()
		return nil
	case comment.FieldRelationID:
		m.ResetRelationID()
		return nil
	case comment.FieldReplyToUID:
		m.ResetReplyToUID()
		return nil
	case comment.FieldRelationType:
		m.ResetRelationType()
		return nil
	case comment.FieldParentID:
		m.ResetParentID()
		return nil
	case comment.FieldBelongCommentID:
		m.ResetBelongCommentID()
		return nil
	case comment.FieldContent:
		m.ResetContent()
		return nil
	case comment.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case comment.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Comment field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CommentMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CommentMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CommentMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CommentMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CommentMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CommentMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CommentMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Comment unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CommentMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Comment edge %s", name)
}

// CommentCountMutation represents an operation that mutates the CommentCount nodes in the graph.
type CommentCountMutation struct {
	config
	op             Op
	typ            string
	id             *uint64
	praise_num     *uint32
	addpraise_num  *uint32
	reply_num      *uint32
	addreply_num   *uint32
	dislike_num    *uint32
	adddislike_num *uint32
	created_at     *time.Time
	updated_at     *time.Time
	clearedFields  map[string]struct{}
	done           bool
	oldValue       func(context.Context) (*CommentCount, error)
	predicates     []predicate.CommentCount
}

var _ ent.Mutation = (*CommentCountMutation)(nil)

// commentcountOption allows management of the mutation configuration using functional options.
type commentcountOption func(*CommentCountMutation)

// newCommentCountMutation creates new mutation for the CommentCount entity.
func newCommentCountMutation(c config, op Op, opts ...commentcountOption) *CommentCountMutation {
	m := &CommentCountMutation{
		config:        c,
		op:            op,
		typ:           TypeCommentCount,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCommentCountID sets the ID field of the mutation.
func withCommentCountID(id uint64) commentcountOption {
	return func(m *CommentCountMutation) {
		var (
			err   error
			once  sync.Once
			value *CommentCount
		)
		m.oldValue = func(ctx context.Context) (*CommentCount, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().CommentCount.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCommentCount sets the old CommentCount of the mutation.
func withCommentCount(node *CommentCount) commentcountOption {
	return func(m *CommentCountMutation) {
		m.oldValue = func(context.Context) (*CommentCount, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CommentCountMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CommentCountMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of CommentCount entities.
func (m *CommentCountMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CommentCountMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetPraiseNum sets the "praise_num" field.
func (m *CommentCountMutation) SetPraiseNum(u uint32) {
	m.praise_num = &u
	m.addpraise_num = nil
}

// PraiseNum returns the value of the "praise_num" field in the mutation.
func (m *CommentCountMutation) PraiseNum() (r uint32, exists bool) {
	v := m.praise_num
	if v == nil {
		return
	}
	return *v, true
}

// OldPraiseNum returns the old "praise_num" field's value of the CommentCount entity.
// If the CommentCount object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CommentCountMutation) OldPraiseNum(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPraiseNum is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPraiseNum requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPraiseNum: %w", err)
	}
	return oldValue.PraiseNum, nil
}

// AddPraiseNum adds u to the "praise_num" field.
func (m *CommentCountMutation) AddPraiseNum(u uint32) {
	if m.addpraise_num != nil {
		*m.addpraise_num += u
	} else {
		m.addpraise_num = &u
	}
}

// AddedPraiseNum returns the value that was added to the "praise_num" field in this mutation.
func (m *CommentCountMutation) AddedPraiseNum() (r uint32, exists bool) {
	v := m.addpraise_num
	if v == nil {
		return
	}
	return *v, true
}

// ResetPraiseNum resets all changes to the "praise_num" field.
func (m *CommentCountMutation) ResetPraiseNum() {
	m.praise_num = nil
	m.addpraise_num = nil
}

// SetReplyNum sets the "reply_num" field.
func (m *CommentCountMutation) SetReplyNum(u uint32) {
	m.reply_num = &u
	m.addreply_num = nil
}

// ReplyNum returns the value of the "reply_num" field in the mutation.
func (m *CommentCountMutation) ReplyNum() (r uint32, exists bool) {
	v := m.reply_num
	if v == nil {
		return
	}
	return *v, true
}

// OldReplyNum returns the old "reply_num" field's value of the CommentCount entity.
// If the CommentCount object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CommentCountMutation) OldReplyNum(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldReplyNum is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldReplyNum requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReplyNum: %w", err)
	}
	return oldValue.ReplyNum, nil
}

// AddReplyNum adds u to the "reply_num" field.
func (m *CommentCountMutation) AddReplyNum(u uint32) {
	if m.addreply_num != nil {
		*m.addreply_num += u
	} else {
		m.addreply_num = &u
	}
}

// AddedReplyNum returns the value that was added to the "reply_num" field in this mutation.
func (m *CommentCountMutation) AddedReplyNum() (r uint32, exists bool) {
	v := m.addreply_num
	if v == nil {
		return
	}
	return *v, true
}

// ResetReplyNum resets all changes to the "reply_num" field.
func (m *CommentCountMutation) ResetReplyNum() {
	m.reply_num = nil
	m.addreply_num = nil
}

// SetDislikeNum sets the "dislike_num" field.
func (m *CommentCountMutation) SetDislikeNum(u uint32) {
	m.dislike_num = &u
	m.adddislike_num = nil
}

// DislikeNum returns the value of the "dislike_num" field in the mutation.
func (m *CommentCountMutation) DislikeNum() (r uint32, exists bool) {
	v := m.dislike_num
	if v == nil {
		return
	}
	return *v, true
}

// OldDislikeNum returns the old "dislike_num" field's value of the CommentCount entity.
// If the CommentCount object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CommentCountMutation) OldDislikeNum(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDislikeNum is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDislikeNum requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDislikeNum: %w", err)
	}
	return oldValue.DislikeNum, nil
}

// AddDislikeNum adds u to the "dislike_num" field.
func (m *CommentCountMutation) AddDislikeNum(u uint32) {
	if m.adddislike_num != nil {
		*m.adddislike_num += u
	} else {
		m.adddislike_num = &u
	}
}

// AddedDislikeNum returns the value that was added to the "dislike_num" field in this mutation.
func (m *CommentCountMutation) AddedDislikeNum() (r uint32, exists bool) {
	v := m.adddislike_num
	if v == nil {
		return
	}
	return *v, true
}

// ResetDislikeNum resets all changes to the "dislike_num" field.
func (m *CommentCountMutation) ResetDislikeNum() {
	m.dislike_num = nil
	m.adddislike_num = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *CommentCountMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *CommentCountMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the CommentCount entity.
// If the CommentCount object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CommentCountMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *CommentCountMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *CommentCountMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *CommentCountMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the CommentCount entity.
// If the CommentCount object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CommentCountMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *CommentCountMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// Where appends a list predicates to the CommentCountMutation builder.
func (m *CommentCountMutation) Where(ps ...predicate.CommentCount) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *CommentCountMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (CommentCount).
func (m *CommentCountMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CommentCountMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.praise_num != nil {
		fields = append(fields, commentcount.FieldPraiseNum)
	}
	if m.reply_num != nil {
		fields = append(fields, commentcount.FieldReplyNum)
	}
	if m.dislike_num != nil {
		fields = append(fields, commentcount.FieldDislikeNum)
	}
	if m.created_at != nil {
		fields = append(fields, commentcount.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, commentcount.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CommentCountMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case commentcount.FieldPraiseNum:
		return m.PraiseNum()
	case commentcount.FieldReplyNum:
		return m.ReplyNum()
	case commentcount.FieldDislikeNum:
		return m.DislikeNum()
	case commentcount.FieldCreatedAt:
		return m.CreatedAt()
	case commentcount.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CommentCountMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case commentcount.FieldPraiseNum:
		return m.OldPraiseNum(ctx)
	case commentcount.FieldReplyNum:
		return m.OldReplyNum(ctx)
	case commentcount.FieldDislikeNum:
		return m.OldDislikeNum(ctx)
	case commentcount.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case commentcount.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown CommentCount field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CommentCountMutation) SetField(name string, value ent.Value) error {
	switch name {
	case commentcount.FieldPraiseNum:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPraiseNum(v)
		return nil
	case commentcount.FieldReplyNum:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReplyNum(v)
		return nil
	case commentcount.FieldDislikeNum:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDislikeNum(v)
		return nil
	case commentcount.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case commentcount.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown CommentCount field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CommentCountMutation) AddedFields() []string {
	var fields []string
	if m.addpraise_num != nil {
		fields = append(fields, commentcount.FieldPraiseNum)
	}
	if m.addreply_num != nil {
		fields = append(fields, commentcount.FieldReplyNum)
	}
	if m.adddislike_num != nil {
		fields = append(fields, commentcount.FieldDislikeNum)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CommentCountMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case commentcount.FieldPraiseNum:
		return m.AddedPraiseNum()
	case commentcount.FieldReplyNum:
		return m.AddedReplyNum()
	case commentcount.FieldDislikeNum:
		return m.AddedDislikeNum()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CommentCountMutation) AddField(name string, value ent.Value) error {
	switch name {
	case commentcount.FieldPraiseNum:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPraiseNum(v)
		return nil
	case commentcount.FieldReplyNum:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddReplyNum(v)
		return nil
	case commentcount.FieldDislikeNum:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDislikeNum(v)
		return nil
	}
	return fmt.Errorf("unknown CommentCount numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CommentCountMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CommentCountMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CommentCountMutation) ClearField(name string) error {
	return fmt.Errorf("unknown CommentCount nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CommentCountMutation) ResetField(name string) error {
	switch name {
	case commentcount.FieldPraiseNum:
		m.ResetPraiseNum()
		return nil
	case commentcount.FieldReplyNum:
		m.ResetReplyNum()
		return nil
	case commentcount.FieldDislikeNum:
		m.ResetDislikeNum()
		return nil
	case commentcount.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case commentcount.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown CommentCount field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CommentCountMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CommentCountMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CommentCountMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CommentCountMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CommentCountMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CommentCountMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CommentCountMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown CommentCount unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CommentCountMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown CommentCount edge %s", name)
}

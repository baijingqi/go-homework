// Code generated by entc, DO NOT EDIT.

package ent

import (
	"comment/ent/commentcount"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CommentCountCreate is the builder for creating a CommentCount entity.
type CommentCountCreate struct {
	config
	mutation *CommentCountMutation
	hooks    []Hook
}

// SetPraiseNum sets the "praise_num" field.
func (ccc *CommentCountCreate) SetPraiseNum(u uint32) *CommentCountCreate {
	ccc.mutation.SetPraiseNum(u)
	return ccc
}

// SetNillablePraiseNum sets the "praise_num" field if the given value is not nil.
func (ccc *CommentCountCreate) SetNillablePraiseNum(u *uint32) *CommentCountCreate {
	if u != nil {
		ccc.SetPraiseNum(*u)
	}
	return ccc
}

// SetReplyNum sets the "reply_num" field.
func (ccc *CommentCountCreate) SetReplyNum(u uint32) *CommentCountCreate {
	ccc.mutation.SetReplyNum(u)
	return ccc
}

// SetNillableReplyNum sets the "reply_num" field if the given value is not nil.
func (ccc *CommentCountCreate) SetNillableReplyNum(u *uint32) *CommentCountCreate {
	if u != nil {
		ccc.SetReplyNum(*u)
	}
	return ccc
}

// SetDislikeNum sets the "dislike_num" field.
func (ccc *CommentCountCreate) SetDislikeNum(u uint32) *CommentCountCreate {
	ccc.mutation.SetDislikeNum(u)
	return ccc
}

// SetNillableDislikeNum sets the "dislike_num" field if the given value is not nil.
func (ccc *CommentCountCreate) SetNillableDislikeNum(u *uint32) *CommentCountCreate {
	if u != nil {
		ccc.SetDislikeNum(*u)
	}
	return ccc
}

// SetCreatedAt sets the "created_at" field.
func (ccc *CommentCountCreate) SetCreatedAt(t time.Time) *CommentCountCreate {
	ccc.mutation.SetCreatedAt(t)
	return ccc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ccc *CommentCountCreate) SetNillableCreatedAt(t *time.Time) *CommentCountCreate {
	if t != nil {
		ccc.SetCreatedAt(*t)
	}
	return ccc
}

// SetUpdatedAt sets the "updated_at" field.
func (ccc *CommentCountCreate) SetUpdatedAt(t time.Time) *CommentCountCreate {
	ccc.mutation.SetUpdatedAt(t)
	return ccc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ccc *CommentCountCreate) SetNillableUpdatedAt(t *time.Time) *CommentCountCreate {
	if t != nil {
		ccc.SetUpdatedAt(*t)
	}
	return ccc
}

// SetID sets the "id" field.
func (ccc *CommentCountCreate) SetID(u uint64) *CommentCountCreate {
	ccc.mutation.SetID(u)
	return ccc
}

// Mutation returns the CommentCountMutation object of the builder.
func (ccc *CommentCountCreate) Mutation() *CommentCountMutation {
	return ccc.mutation
}

// Save creates the CommentCount in the database.
func (ccc *CommentCountCreate) Save(ctx context.Context) (*CommentCount, error) {
	var (
		err  error
		node *CommentCount
	)
	ccc.defaults()
	if len(ccc.hooks) == 0 {
		if err = ccc.check(); err != nil {
			return nil, err
		}
		node, err = ccc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CommentCountMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ccc.check(); err != nil {
				return nil, err
			}
			ccc.mutation = mutation
			if node, err = ccc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ccc.hooks) - 1; i >= 0; i-- {
			if ccc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ccc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ccc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ccc *CommentCountCreate) SaveX(ctx context.Context) *CommentCount {
	v, err := ccc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccc *CommentCountCreate) Exec(ctx context.Context) error {
	_, err := ccc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccc *CommentCountCreate) ExecX(ctx context.Context) {
	if err := ccc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ccc *CommentCountCreate) defaults() {
	if _, ok := ccc.mutation.PraiseNum(); !ok {
		v := commentcount.DefaultPraiseNum
		ccc.mutation.SetPraiseNum(v)
	}
	if _, ok := ccc.mutation.ReplyNum(); !ok {
		v := commentcount.DefaultReplyNum
		ccc.mutation.SetReplyNum(v)
	}
	if _, ok := ccc.mutation.DislikeNum(); !ok {
		v := commentcount.DefaultDislikeNum
		ccc.mutation.SetDislikeNum(v)
	}
	if _, ok := ccc.mutation.CreatedAt(); !ok {
		v := commentcount.DefaultCreatedAt()
		ccc.mutation.SetCreatedAt(v)
	}
	if _, ok := ccc.mutation.UpdatedAt(); !ok {
		v := commentcount.DefaultUpdatedAt()
		ccc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ccc *CommentCountCreate) check() error {
	if _, ok := ccc.mutation.PraiseNum(); !ok {
		return &ValidationError{Name: "praise_num", err: errors.New(`ent: missing required field "praise_num"`)}
	}
	if _, ok := ccc.mutation.ReplyNum(); !ok {
		return &ValidationError{Name: "reply_num", err: errors.New(`ent: missing required field "reply_num"`)}
	}
	if _, ok := ccc.mutation.DislikeNum(); !ok {
		return &ValidationError{Name: "dislike_num", err: errors.New(`ent: missing required field "dislike_num"`)}
	}
	if _, ok := ccc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "created_at"`)}
	}
	if _, ok := ccc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "updated_at"`)}
	}
	if v, ok := ccc.mutation.ID(); ok {
		if err := commentcount.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "id": %w`, err)}
		}
	}
	return nil
}

func (ccc *CommentCountCreate) sqlSave(ctx context.Context) (*CommentCount, error) {
	_node, _spec := ccc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ccc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	return _node, nil
}

func (ccc *CommentCountCreate) createSpec() (*CommentCount, *sqlgraph.CreateSpec) {
	var (
		_node = &CommentCount{config: ccc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: commentcount.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: commentcount.FieldID,
			},
		}
	)
	if id, ok := ccc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ccc.mutation.PraiseNum(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: commentcount.FieldPraiseNum,
		})
		_node.PraiseNum = value
	}
	if value, ok := ccc.mutation.ReplyNum(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: commentcount.FieldReplyNum,
		})
		_node.ReplyNum = value
	}
	if value, ok := ccc.mutation.DislikeNum(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: commentcount.FieldDislikeNum,
		})
		_node.DislikeNum = value
	}
	if value, ok := ccc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: commentcount.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := ccc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: commentcount.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// CommentCountCreateBulk is the builder for creating many CommentCount entities in bulk.
type CommentCountCreateBulk struct {
	config
	builders []*CommentCountCreate
}

// Save creates the CommentCount entities in the database.
func (cccb *CommentCountCreateBulk) Save(ctx context.Context) ([]*CommentCount, error) {
	specs := make([]*sqlgraph.CreateSpec, len(cccb.builders))
	nodes := make([]*CommentCount, len(cccb.builders))
	mutators := make([]Mutator, len(cccb.builders))
	for i := range cccb.builders {
		func(i int, root context.Context) {
			builder := cccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CommentCountMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cccb *CommentCountCreateBulk) SaveX(ctx context.Context) []*CommentCount {
	v, err := cccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cccb *CommentCountCreateBulk) Exec(ctx context.Context) error {
	_, err := cccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cccb *CommentCountCreateBulk) ExecX(ctx context.Context) {
	if err := cccb.Exec(ctx); err != nil {
		panic(err)
	}
}

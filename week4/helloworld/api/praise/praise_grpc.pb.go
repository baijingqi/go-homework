// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package praise

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PraiseClient is the client API for Praise service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PraiseClient interface {
	AddPraise(ctx context.Context, in *AddPraiseRequest, opts ...grpc.CallOption) (*AddPraiseReply, error)
	CancelPraise(ctx context.Context, in *CancelPraiseRequest, opts ...grpc.CallOption) (*CancelPraiseReply, error)
	IsPraisePraise(ctx context.Context, in *IsPraisePraiseRequest, opts ...grpc.CallOption) (*IsPraisePraiseReply, error)
}

type praiseClient struct {
	cc grpc.ClientConnInterface
}

func NewPraiseClient(cc grpc.ClientConnInterface) PraiseClient {
	return &praiseClient{cc}
}

func (c *praiseClient) AddPraise(ctx context.Context, in *AddPraiseRequest, opts ...grpc.CallOption) (*AddPraiseReply, error) {
	out := new(AddPraiseReply)
	err := c.cc.Invoke(ctx, "/api.praise.Praise/AddPraise", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *praiseClient) CancelPraise(ctx context.Context, in *CancelPraiseRequest, opts ...grpc.CallOption) (*CancelPraiseReply, error) {
	out := new(CancelPraiseReply)
	err := c.cc.Invoke(ctx, "/api.praise.Praise/CancelPraise", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *praiseClient) IsPraisePraise(ctx context.Context, in *IsPraisePraiseRequest, opts ...grpc.CallOption) (*IsPraisePraiseReply, error) {
	out := new(IsPraisePraiseReply)
	err := c.cc.Invoke(ctx, "/api.praise.Praise/IsPraisePraise", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PraiseServer is the server API for Praise service.
// All implementations must embed UnimplementedPraiseServer
// for forward compatibility
type PraiseServer interface {
	AddPraise(context.Context, *AddPraiseRequest) (*AddPraiseReply, error)
	CancelPraise(context.Context, *CancelPraiseRequest) (*CancelPraiseReply, error)
	IsPraisePraise(context.Context, *IsPraisePraiseRequest) (*IsPraisePraiseReply, error)
	mustEmbedUnimplementedPraiseServer()
}

// UnimplementedPraiseServer must be embedded to have forward compatible implementations.
type UnimplementedPraiseServer struct {
}

func (UnimplementedPraiseServer) AddPraise(context.Context, *AddPraiseRequest) (*AddPraiseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPraise not implemented")
}
func (UnimplementedPraiseServer) CancelPraise(context.Context, *CancelPraiseRequest) (*CancelPraiseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelPraise not implemented")
}
func (UnimplementedPraiseServer) IsPraisePraise(context.Context, *IsPraisePraiseRequest) (*IsPraisePraiseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsPraisePraise not implemented")
}
func (UnimplementedPraiseServer) mustEmbedUnimplementedPraiseServer() {}

// UnsafePraiseServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PraiseServer will
// result in compilation errors.
type UnsafePraiseServer interface {
	mustEmbedUnimplementedPraiseServer()
}

func RegisterPraiseServer(s grpc.ServiceRegistrar, srv PraiseServer) {
	s.RegisterService(&Praise_ServiceDesc, srv)
}

func _Praise_AddPraise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPraiseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PraiseServer).AddPraise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.praise.Praise/AddPraise",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PraiseServer).AddPraise(ctx, req.(*AddPraiseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Praise_CancelPraise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelPraiseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PraiseServer).CancelPraise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.praise.Praise/CancelPraise",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PraiseServer).CancelPraise(ctx, req.(*CancelPraiseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Praise_IsPraisePraise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsPraisePraiseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PraiseServer).IsPraisePraise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.praise.Praise/IsPraisePraise",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PraiseServer).IsPraisePraise(ctx, req.(*IsPraisePraiseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Praise_ServiceDesc is the grpc.ServiceDesc for Praise service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Praise_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.praise.Praise",
	HandlerType: (*PraiseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddPraise",
			Handler:    _Praise_AddPraise_Handler,
		},
		{
			MethodName: "CancelPraise",
			Handler:    _Praise_CancelPraise_Handler,
		},
		{
			MethodName: "IsPraisePraise",
			Handler:    _Praise_IsPraisePraise_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/praise/praise.proto",
}
